apply plugin: 'com.android.application'

android {
    namespace "io.ionic.starter"
    compileSdk 34 // Ajusta el número según sea necesario
    defaultConfig {
        applicationId "io.ionic.starter"
        minSdkVersion 24 // Cambia a 24 para resolver el problema del atributo `networkSecurityConfig`
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
            // Ignorar ciertos archivos en los activos empaquetados
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }

    signingConfigs {
        debug {
            storeFile file('C:/Users/ferna/Downloads/sos-vet/sos-vet/android/app/debug.keystore') // Ruta al archivo
            storePassword 'android' // Contraseña usada al crear el keystore
            keyAlias 'androiddebugkey' // Alias usado al crear el keystore
            keyPassword 'android' // Contraseña del alias
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

repositories {
    google()
    mavenCentral()
    maven { url "https://jitpack.io" } // Por si hay dependencias de repositorios externos
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
